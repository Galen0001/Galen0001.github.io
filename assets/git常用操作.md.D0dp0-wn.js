import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.Bw-5EFTY.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"git常用操作.md","filePath":"git常用操作.md","lastUpdated":null}'),e={name:"git常用操作.md"};function l(p,s,h,g,r,d){return t(),i("div",null,s[0]||(s[0]=[n(`<p>以下是常用的 Git 命令整理，涵盖你提到的操作场景：</p><hr><h3 id="_1-获取最新代码" tabindex="-1">1. <strong>获取最新代码</strong> <a class="header-anchor" href="#_1-获取最新代码" aria-label="Permalink to &quot;1. **获取最新代码**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git pull origin &lt;branch_name&gt;  # 拉取远程分支最新代码并合并到当前分支</span></span>
<span class="line"><span>git fetch origin               # 仅获取远程最新代码（不自动合并）</span></span></code></pre></div><hr><h3 id="_2-列出所有分支" tabindex="-1">2. <strong>列出所有分支</strong> <a class="header-anchor" href="#_2-列出所有分支" aria-label="Permalink to &quot;2. **列出所有分支**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch -a                  # 列出本地和远程所有分支（远程分支显示为红色）</span></span>
<span class="line"><span>git branch                     # 仅列出本地分支</span></span>
<span class="line"><span>git remote show origin         # 查看远程分支详细信息</span></span></code></pre></div><hr><h3 id="_3-切换分支" tabindex="-1">3. <strong>切换分支</strong> <a class="header-anchor" href="#_3-切换分支" aria-label="Permalink to &quot;3. **切换分支**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout &lt;branch_name&gt;     # 切换到已存在的本地分支</span></span>
<span class="line"><span>git checkout -b &lt;new_branch&gt;   # 创建并切换到新分支（基于当前分支）</span></span>
<span class="line"><span>git checkout -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支并切换</span></span></code></pre></div><hr><h3 id="_4-提交代码" tabindex="-1">4. <strong>提交代码</strong> <a class="header-anchor" href="#_4-提交代码" aria-label="Permalink to &quot;4. **提交代码**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git add &lt;file&gt;                 # 将文件添加到暂存区</span></span>
<span class="line"><span>git add .                      # 添加所有修改的文件到暂存区</span></span>
<span class="line"><span>git commit -m &quot;提交说明&quot;        # 提交暂存区的更改到本地仓库</span></span>
<span class="line"><span>git commit -am &quot;提交说明&quot;       # 跳过 \`git add\`，直接提交已跟踪文件的修改（新增文件需先 \`git add\`）</span></span></code></pre></div><hr><h3 id="_5-推送代码" tabindex="-1">5. <strong>推送代码</strong> <a class="header-anchor" href="#_5-推送代码" aria-label="Permalink to &quot;5. **推送代码**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push origin &lt;branch_name&gt;  # 推送本地分支到远程仓库</span></span>
<span class="line"><span>git push -u origin &lt;branch_name&gt;  # 首次推送时关联远程分支（后续可简写为 \`git push\`）</span></span>
<span class="line"><span>git push --force              # 强制推送（谨慎使用，会覆盖远程历史）</span></span></code></pre></div><hr><h3 id="_6-查看提交日志" tabindex="-1">6. <strong>查看提交日志</strong> <a class="header-anchor" href="#_6-查看提交日志" aria-label="Permalink to &quot;6. **查看提交日志**&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # 查看完整提交历史（按时间倒序）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 简洁模式显示提交历史（单行显示）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                     # 查看历史及具体文件变更内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --graph</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 图形化显示分支合并历史</span></span></code></pre></div><hr><h3 id="其他常用命令" tabindex="-1">其他常用命令 <a class="header-anchor" href="#其他常用命令" aria-label="Permalink to &quot;其他常用命令&quot;">​</a></h3><ul><li><strong>撤销修改</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git restore &lt;file&gt;           # 撤销工作区的未暂存修改（Git 2.23+）</span></span>
<span class="line"><span>git reset --hard HEAD        # 丢弃所有未提交的修改（慎用）</span></span></code></pre></div><ul><li><strong>合并分支</strong></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 将指定分支合并到当前分支</span></span></code></pre></div><ul><li><strong>删除分支</strong></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 删除本地分支（需已合并）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 删除远程分支</span></span></code></pre></div><ul><li><strong>查看状态</strong></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   # 查看当前工作区和暂存区状态</span></span></code></pre></div><hr><p>根据你的需求组合使用这些命令即可完成日常开发流程。如果需要更详细的参数说明，可以通过 <code>git &lt;command&gt; --help</code> 查看帮助文档（如 <code>git pull --help</code>）。</p>`,31)]))}const c=a(e,[["render",l]]);export{k as __pageData,c as default};
